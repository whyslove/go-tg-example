// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package user

import (
	"context"
	goUUID "github.com/google/uuid"
	json "github.com/seniorGolang/json"
)

type ClientMathematical struct {
	*ClientJsonRPC
}

type retMathematicalAdd func(result int, err error)

func (cli *ClientMathematical) ReqAdd(ret retMathematicalAdd, a int, b int) (request baseJsonRPC) {

	request = baseJsonRPC{
		Method: "mathematical.add",
		Params: requestMathematicalAdd{
			A: a,
			B: b,
		},
		Version: Version,
	}
	var err error
	var response responseMathematicalAdd

	if ret != nil {
		request.retHandler = func(jsonrpcResponse baseJsonRPC) {
			if jsonrpcResponse.Error != nil {
				err = cli.errorDecoder(jsonrpcResponse.Error)
				ret(response.Result, err)
				return
			}
			err = json.Unmarshal(jsonrpcResponse.Result, &response)
			ret(response.Result, err)
		}
		request.ID = []byte("\"" + goUUID.New().String() + "\"")
	}
	return
}

func (cli *ClientMathematical) Add(ctx context.Context, a int, b int) (result int, err error) {

	retHandler := func(_result int, _err error) {
		result = _result
		err = _err
	}
	if blockErr := cli.Batch(ctx, cli.ReqAdd(retHandler, a, b)); blockErr != nil {
		err = blockErr
		return
	}
	return
}
